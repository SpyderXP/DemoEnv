/******************************************************************************
  *  文件名     : common_list.h
  *  负责人     : xupeng
  *  创建日期   : 20250128
  *  版本号     : v1.1 
  *  文件描述   : 通用链表接口.
  *  其他       : 无.
  *  修改日志   : 无.
******************************************************************************/
#ifndef __COMMON_LIST_H__
#define __COMMON_LIST_H__

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct LIST_NODE_S
{
    void *data;                 /* 用户自定义数据区(用户申请释放) */
    uint32_t datalen;           /* 数据区长度 */
    struct LIST_NODE_S *next;
} LIST_NODE_T;

typedef struct LIST_S 
{
    uint16_t size;              /* 链表节点数量 */
    LIST_NODE_T *head;          /* 链表头 */
    LIST_NODE_T *tail;          /* 链表尾 */
} LIST_T;

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250128
*  函数功能  : 头插入链.
*  输入参数  : node - 待插入节点.
*  输出参数  : list - 待插入链表.
*  返回值    : 0 - 成功  -1 - 失败.
*************************************************************************/
int list_push_node_to_head(LIST_T *list, LIST_NODE_T *node);

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250128
*  函数功能  : 尾插入链.
*  输入参数  : node - 待插入节点.
*  输出参数  : list - 待插入链表.
*  返回值    : 0 - 成功  -1 - 失败.
*************************************************************************/
int list_push_node_to_tail(LIST_T *list, LIST_NODE_T *node);

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250128
*  函数功能  : 取出头部节点.
*  输入参数  : list - 待取链表.
*  输出参数  : node - 取出的节点.
*  返回值    : 0 - 成功  -1 - 失败.
*************************************************************************/
int list_pop_node_from_head(LIST_T *list, LIST_NODE_T **node);

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250128
*  函数功能  : 取出尾部节点.
*  输入参数  : list - 待取链表.
*  输出参数  : node - 取出的节点.
*  返回值    : 0 - 成功  -1 - 失败.
*************************************************************************/
int list_pop_node_from_tail(LIST_T *list, LIST_NODE_T **node);

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250128
*  函数功能  : 取出指定条件的节点.
*  输入参数  : list - 待遍历链表.
*             data - 条件数据.
*             datalen - 数据长度.
*  输出参数  : node - 取出的节点.
*  返回值    : 0 - 成功  -1 - 失败.
*************************************************************************/
int list_pop_node_by_elem(LIST_T *list, void *data, uint32_t datalen, LIST_NODE_T **node);



typedef struct BINARY_HEAP_NODE_S
{
    int priority;       /* 节点优先级 */
    int datalen;        /* 用户自定义数据长度 */
    void *data;         /* 用户自定义数据 */
} BINARY_HEAP_NODE_T;

typedef struct BINARY_HEAP_S
{
    BINARY_HEAP_NODE_T **nodes;     /* 用户自己维护节点实际内存 */
    int size;
    int capacity;
} BINARY_HEAP_T;

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250326
*  函数功能  : 创建二叉堆.
*  输入参数  : capacity - 二叉堆支持的最大节点数.
*  输出参数  : 无.
*  返回值    : 创建的二叉堆.
*************************************************************************/
BINARY_HEAP_T *create_binary_heap(int capacity);

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250326
*  函数功能  : 扩展二叉堆的最大节点数.
*  输入参数  : heap - 待扩展的二叉堆.
*  输出参数  : 无.
*  返回值    : 扩展后的二叉堆.
*************************************************************************/
BINARY_HEAP_T *extend_binary_heap_capacity(BINARY_HEAP_T *heap);

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250326
*  函数功能  : 最小堆元素下沉.
*  输入参数  : heap - 最小堆.
*             index - 指定下沉节点的索引.
*  输出参数  : 无.
*  返回值    : 无.
*************************************************************************/
void min_heapify_down(BINARY_HEAP_T *heap, int index);

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250326
*  函数功能  : 最小堆元素上浮.
*  输入参数  : heap - 最小堆.
*             index - 指定上浮节点的索引.
*  输出参数  : 无.
*  返回值    : 无.
*************************************************************************/
void min_heapify_up(BINARY_HEAP_T *heap, int index);

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250326
*  函数功能  : 最小堆元素插入.
*  输入参数  : heap - 最小堆.
*             node - 待插入节点(用户自己维护节点的内存).
*  输出参数  : 无.
*  返回值    : 0 - 成功  -1 - 失败.
*************************************************************************/
int min_heap_insert(BINARY_HEAP_T *heap, BINARY_HEAP_NODE_T *node);

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250326
*  函数功能  : 最小堆元素提取.
*  输入参数  : heap - 最小堆.
*  输出参数  : 无.
*  返回值    : 最小优先级节点.
*************************************************************************/
BINARY_HEAP_NODE_T *min_heap_extract(BINARY_HEAP_T *heap);

/************************************************************************* 
*  负责人    : xupeng
*  创建日期  : 20250326
*  函数功能  : 将一个无序二叉堆构建为最小堆.
*  输入参数  : heap - 最小堆.
*  输出参数  : 无.
*  返回值    : 无.
*************************************************************************/
void build_min_heap(BINARY_HEAP_T *heap);



typedef struct TREENODE_S 
{
    int data;
    struct TREENODE_S *left;
    struct TREENODE_S *right;
} TREENODE_T;



#ifdef __cplusplus
}
#endif

#endif
